name: CICD
on: [ push, pull_request ]
jobs:
  build-test:
    name: Test and Build
    runs-on: ubuntu-18.04
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
    - name: Check out src from GitHub
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        sudo apt-get -y install make bats
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade setuptools wheel twine pbr
        [ -f requirements.txt ] && python3 -m pip install -Ur requirements.txt
        make bats-libraries
    - name: Get variables
      id: get_vars
      run: |
        echo ::set-output name=REPO::$(basename ${{ github.repository }})
        echo ::set-output name=BRANCH::${GITHUB_REF##*/}
        echo ::set-output name=VERSION::$(python3 setup.py --version)
        echo ::set-output name=ARTIFACT::${{ steps.get_vars.outputs.REPO }}-${{ steps.get_vars.outputs.VERSION }}
      env:
        SETUPTOOLS_SCM_DEBUG: 1
    - name: Expose variables for debugging
      run: |
        echo "GITHUB_REF:   ${GITHUB_REF}"
        echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
        echo "BRANCH:       ${{ steps.get_vars.outputs.BRANCH }}"
        echo "REPO:         ${{ steps.get_vars.outputs.REPO }}"
        echo "VERSION:      ${{ steps.get_vars.outputs.VERSION }}"
        echo "ARTIFACT:     ${{ steps.get_vars.outputs.ARTIFACT }}"
    - name: Run tests
      run: make test
    - name: Build a binary wheel and a source tarball
      run: make bdist_wheel sdist twine-check
    - name: Display artifacts
      run: ls -lR dist
    - name: Store the source distribution
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.get_vars.outputs.ARTIFACT }}
        path: dist/*
  deploy:
    name: Publish
    if: >-
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags')
    needs:
      - build-test
    runs-on: ubuntu-18.04
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
    - name: Download all the artifacts
      uses: actions/download-artifact@v2
    - name: Get variables
      id: get_vars
      run: |
        echo ::set-output name=BRANCH::${GITHUB_REF##*/}
        echo ::set-output name=REPO::$(basename ${{ github.repository }})
        echo ::set-output name=ARTIFACT::$(echo ${{ steps.get_vars.outputs.REPO }}* )
      env:
        SETUPTOOLS_SCM_DEBUG: 1
    - name: Expose variables for debugging
      run: |
        echo "BRANCH:       ${{ steps.get_vars.outputs.BRANCH }}"
        echo "REPO:         ${{ steps.get_vars.outputs.REPO }}"
        echo "VERSION:      ${{ steps.get_vars.outputs.VERSION }}"
        echo "ARTIFACT:     ${{ steps.get_vars.outputs.ARTIFACT }}"
    - name: Display artifacts
      run: |
        ls -lR
    - name: Publish to TestPyPI
      if: >-
        github.event_name == 'push' &&
        contains(github.ref, '.RC')
      uses: pypa/gh-action-pypi-publish@master
      with:
        repository_url: https://test.pypi.org/legacy/
        password: ${{ secrets.lim_test_pypi_token }}
        packages_dir: ${{ steps.get_vars.outputs.ARTIFACT }}
    - name: Publish to PyPI
      if: >-
        github.event_name == 'push' &&
        ! contains(github.ref, '.RC')
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.lim_pypi_token }}
        packages_dir: ${{ steps.get_vars.outputs.ARTIFACT }}

